name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  Build-API:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Download Release Asset from Latest Release
        env:
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
            gh release download --repo NinePiece2/MRI-Brain-Tumor-Detection --pattern "classification_model.h5" --dir models

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Flask-Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/mri-brain-tumor-detection:api

  Build-UI:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./NextJS-Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/mri-brain-tumor-detection:ui
  
  Deploy:
    runs-on: self-hosted
    needs: [Build-API, Build-UI]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Pull latest Docker images
        run: docker-compose pull

      - name: Remove Old Continer
        run: docker-compose down

      - name: Deploy with Docker Compose
        run: docker-compose up -d

      - name: Remove unused Docker images
        run: docker image prune -af